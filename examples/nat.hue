
assume Nat : Prop
assume Z   : Nat
assume Suc : Nat -> Nat

(*var rec is ΠP:(Nat -> Prop).(P Z) -> (Πn:Nat. (P n) -> (P (Suc n))) -> (Πn:Nat. (P n));*)
define eq = λq:Nat.λp:Nat.ΠP:(Nat -> Prop). (P q) -> (P p) : (Nat -> Nat -> Prop)



proof refl : (Πx:Nat.eq x x)
  intro
  intro
  intro
  assumption
qed

(*def refl is (Πx:Nat.eq x x) = λx0:Nat.λx1:Nat -> Prop.λx2:x1 x0.x2;*)

(*hasta aca llegue*)

proof sim : (Π x:Nat.Πy:Nat. (eq x y) -> (eq y x))
  intro
  intro
  intro
  apply (H2 (λN:Nat.eq N H0)) 
  exact (refl H0)
qed

proof trans : (Πa:Nat.Πb:Nat.Πc:Nat.(eq a b) -> (eq b c) -> (eq a c))
  intro
  intro
  intro
  intro
  intro
  intro
  intro
  apply H4 H5
  apply H3 H5
  assumption
qed

define false = ΠA:Prop.A : Prop
define not   = λA:Prop.A -> false : Prop -> Prop

proof aux : not (eq Z (Suc Z))
  intro
  intro
  
  
qed

proof chan : (Πx:Nat.not (eq Z (Suc x)))
  intro
  admit
qed


